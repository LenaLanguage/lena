# standard functions

# streams

console >> var
console << var

file >> var
file << var

# variables

define var as i32                       # static typing
define var                              # dincamic typing
define var as i32 with default 23452    # static typing with initialization
define VAR = 4096                       # constant

define var as cstr with default "ABC" times 2000    # create var cstr "ABC" + "ABC".... 2000 times

define sum(x, y) as i32 {
    x + y -> sum
} 

define find_zeroes(array) {
    (find 0 in array) -> find_zeroes
}

# void function

define out_str_10_times(string) {
    repeat: console << string
}

# loops

repeat 1000: console << "Hello World!"

define a as i32[20] with default 0 times 20

# {0, 0, 0, 0, 0} = 0 times 5

define b as i32[20] with default a

convert b to i64[20]






/* 1 до 100, каждое что делиться на 3 умножить на два */

define array as i32[] = tranform (sequence from 1 to 100) { each % 3 == 0 -> each *= 2 }


define array as i32[] = tranform (sequence from 1 to 100) { 
    (index of each) % 3 == 0 -> each *= 2 
}

console << array


/* 2 strings в первой строке разделить все числа которые делятся на 3 разделить на 3 */

define string1 as str
define string2 as str
define num_array1 as i32[]
define num_array2 as i32[]


console >> string1
console >> string2

num_array1 = transform (find <numbers> in string1) { each % 3 == 0 -> each /= 3 }
num_array2 = transform (find <numbers> in string2) { each % 3 == 0 -> each /= 2 }

console << num_array1 << " " << num_array2



/* открыть файл и посчитать количество подстроки */

define myfile = file("something.txt")
define string_array as str[]

string_array = (find "substr" in myfile)

console << le




/* NEW VERSION */

a:i32 = 10, b = "Hello world"

cout << something
cin >> variables
cerr << something

a = file() ; type = stream

try (a = file()) {
    cout << 
} except(file::FILE_OPEN_FAILURE)() {
    cerr << "Error!"
}


/* Macroses */

(0 times 50) -> new array
repeat n: -> repeat something n times












